#!/bin/bash
# git-release: Check documentation before release then commit
#
# Usage:
#
#  $ git add :/
#  $ git relase 1.2.3 [-f]
#  ...
#  $ git log --oneline
#  f7f79ba (HEAD -> master, tag: v1.2.3) 1.2.3

function check_that_there_are_staged_changes()
{
  (git diff --staged | grep ".*" > /dev/null)
  if [[ $? != 0 ]]; then
    echo "FAIL: There are no staged changes, please stage only version number incrementation!"
    exit 1
  fi
}

function check_that_only_version_modified()
{
  (git diff --staged --unified=0 | grep -Po "(?<=^\+)(?!\+\+).*" | grep -v "v\?$1"> /dev/null)
  if [[ $? == 0 ]]; then
    echo "FAIL: Do not stage anything else expect version number (maybe you mistyped it)!"
    exit 1
  fi
}

function check_required_documents()
{
  for doc in README CHANGELOG LICENSE; do
    if [ ! -f $doc* ]; then
      echo "FAIL: There is no $doc, please write it!" >&2
      exit 1
    fi
  done
}

function check_optional_documents()
{
  for doc in README CHANGELOG LICENSE; do
    if [ ! -f $doc* ]; then
      echo "WARNING: There is no $doc, please write it!" >&2
    fi
  done
}

function check_testing_time()
{
  (git log --since "3 days" | grep ".*" > /dev/null)
  if [[ $? == 0 ]]; then
    echo "WARNING: The product has not been tested for at least 3 days"
  fi
}

function ask_questions()
{
  for question in \
    "Is the repository public?" \
    "Are the URLs in the documentation correct?" \
    "Are there a real life example and a screencast in the readme?" \
    "Are the changes documented in the changelog?" \
    "Is the documentation adjusted to the code changes?" \
    "Are the version numbers updated everywhere (package.json for example)?" \
  ; do
    read -p "$question [y/n] " -n 1 answer
    # Move to a new line
    echo
    if [[ ! $answer =~ ^[Yy] ]]; then
      echo "FAIL: Please come back when you done" >&2
      # Handle exits from shell or function but don't exit interactive shell
      [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1
    fi
  done
}

function commit()
{
  tag=$1; shift
  git commit --message "$tag"
  git tag --annotate --message "$tag" --edit "v$tag" $*
}

if [ $# == 0 ]; then
  echo "ERROR: The version argument is missing"
  exit 1
fi

repo_root="`git rev-parse --show-toplevel`"
cd "$repo_root"

version_number_without_v_prefix=${*#v}

check_that_there_are_staged_changes
check_that_only_version_modified $version_number_without_v_prefix
check_required_documents
check_optional_documents
check_testing_time
ask_questions
commit $version_number_without_v_prefix
