# .gitconfig: git configuration
#
# USEFUL COMMANDS:
#
#   LOG
#
#     git log --grep'regex'
#       Look for expression in commit messages.
#
#     git log -S'string' -- file
#       Look for the addition/deletion of text - ie. when was the string
#       firstly introduced or where was it removed.
#
#     git log -G'regex' -- file
#       Look for differences whose patch text contains modified lines that
#       match <regex>.
#
#     git log -L '/int main/',/^}/:main.c
#       Shows how the function main() in the file main.c evolved over time.
#
#   OTHER
#
#     git clean -fd
#       Delete untracked files and directories. Add `-n` to just show the
#       affected files/directories.
#
# ==================== BimbaLaszlo (.github.io|gmail.com) ====================

[user]

  name         = "BimbaLaszlo"
  email        = "bimbalaszlo@gmail.com"

[alias]
  flags        = "!FLAG_LOG='--graph --decorate --find-renames --date-order'; \
                   FLAG_DIFF='--patch --stat --ignore-blank-lines';"

  cl           = "clone"
  ps           = "push --all --follow-tags"
  pl           = "pull"
  subpl        = "!git submodule foreach git pull --tags origin master"
  seto         = "remote set-url origin"
  ghcl         = "!sh -c 'git clone https://www.github.com/$*' -"
  ghps         = "!sh -c 'git remote set-url origin https://www.github.com/$*; git push --all --follow-tags --set-upstream https://www.github.com/$*' -"
  glcl         = "!sh -c 'git clone https://gitlab.com/$*' -"
  glps         = "!sh -c 'git remote set-url oigin https://gitlab.com/$*; git push --all --follow-tags --set-upstream https://gitlab.com/$*' -"

  # Log flags:
  #   --branches  show all branch (SHA..SHA not works with it?)
  glog         = "!git flags; git log $FLAG_LOG --name-status"
  gslog        = "!git flags; git log $FLAG_LOG --stat"
  plog         = "!git flags; git log $FLAG_LOG --patch --stat --ignore-blank-lines"
  pwlog        = "!git flags; git log $FLAG_LOG --patch --stat --ignore-blank-lines --ignore-all-space"
  clog         = "!git flags; git log $FLAG_LOG --name-status ORIG_HEAD.."
  day          = "!git flags; git log $FLAG_LOG --name-status --since midnight"
  yday         = "!git flags; git log $FLAG_LOG --name-status --since=day.before.yesterday.midnight --until=midnight"
  slog         = "!git flags; git log $FLAG_LOG --date=short --format='%C(auto)%h%C(auto)%d %C(bold blue)%ad %an%n        %s%C(reset)'"
  sslog        = "!git flags; git log $FLAG_LOG --date=short --format='%C(auto)%h%C(auto)%d %C(bold blue)%ad %an%n        %s%C(reset)' --simplify-by-decoration"
  flog         = "diff --name-status"
  ls           = "ls-tree -r --name-only"
  s            = "status"

  df           = "!git flags; git diff $FLAG_DIFF"
  dfc          = "!git flags; git diff $FLAG_DIFF --cached"
  dfw          = "!git flags; git diff $FLAG_DIFF --ignore-all-space"
  dfwc         = "!git flags; git diff $FLAG_DIFF --ignore-all-space --cached"
  gdf          = "difftool"
  gdfc         = "difftool --cached"

  ad           = "add --all"
  ada          = "add --all :/"
  c            = "commit"
  ca           = "commit --amend"
  cm           = "commit -m"
  cmu          = "commit -m Update"

  # fixup:  merge without changing the commit message
  # squash: the commit message is editable
  cfu          = "!sh -c 'git commit --fixup=$1  && git rebase --autosquash --interactive $1~' -"
  csq          = "!sh -c 'git commit --squash=$1 && git rebase --autosquash --interactive $1~' -"

  co           = "checkout"

  st           = "stash"
  stp          = "stash pop"
  reb          = "rebase --autosquash --interactive"

  bss          = "bisect start"
  bsr          = "bisect reset" # stop
  bsg          = "bisect good"
  bsb          = "bisect bad"

  ctags        = "!.git/hooks/0_ctags"

[core]

  editor       = "gvim --nofork"

  ; Ne konvertalja a sorvegzodeseket.
  autocrlf     = "false"

  ; Windows halozati meghajtokon nagyon lassu, ez gyorsitja a dolgokat, de
  ; legalabb 1.9.4 verzio kell.
  ; http://stackoverflow.com/a/24045966
  preloadindex = "true"
  fscache      = "true"

[color]

  ui           = "true"

[init]

  ; A konyvtar, amit init es clone eseten bemasol a .git konvytarba. Pl.:
  ; templatedir/hooks -> .git/hooks
  ; http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  templatedir  = "~/.git_template"

[commit]

  ; Az alapertelmezett uzenet, amit commit-olas kozben a szokasos elemek ele
  ; kiir.
  template     = "~/.git_template/commit_message"

[log]

  ; Roviditett SHA.
  abbrevCommit = "true"

  ; 2014-03-25 12:34:56 +0100
  date         = "iso"

  ; Track the full history of a file (follows file renames).
  follow       = "true"

[diff]

  tool         = "gvimdiff"

[merge]

  tool         = "gvimdiff"

[push]

  default      = "simple"

[gc]

  ; Fajlok szamanak minimalizalasa a .git konyvtarban. (valamennit gyorsit)
  auto         = 256
