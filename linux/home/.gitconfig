# .gitconfig: git configuration
#
# USEFUL COMMANDS:
#
#   LOG/DIFF
#
#     Flags:
#
#       -w                              Ignore whitespace diffs
#       --color-words                   Show the exact diffs
#
#   LOG
#
#     Flags:
#
#       --all                           Show all branch/tag/remote
#       --branches, --tags, --remotes   Guess
#
#     Look for expression in commit messages.
#
#       git log --grep'regex'
#
#     Look for the addition/deletion of text - ie. when was the string
#     firstly introduced or where was it removed.
#
#       git log -S'string' -- file
#
#     Look for differences whose patch text contains modified lines that
#     match <regex>.
#
#       git log -G'regex' -- file
#
#     Shows how the function main() in the file main.c evolved over time.
#
#       git log -L '/int main/',/^}/:main.c
#
#   OTHER
#
#     RESOLVE A BINARY MERGE
#
#       git checkout --ours   -- <path/to/conflicted_file>
#       git checkout --theirs -- <path/to/conflicted_file>
#
#     where "ours" is the file in the current branch and "theirs" is the file
#     from the branch we want to merge.
#
#     DELETE UNTRACKED FILES
#
#     ..., directories and .gitignore-ed files. Use `-x` instead of `-X` to
#     clean untracked files too. Add `-n` to only show the affected
#     files/directories.
#
#       git clean -fdX
#
#     SPLIT A COMMIT TO SMALLER COMMITS
#
#       git rebase COMMIT_TO_SPLIT~
#       # Modify `pick` to `edit`.
#       git reset HEAD~
#       git add FILES_FOR_A_COMMIT
#       git commit -m "A commit"
#       git add FILES_FOR_B_COMMIT
#       git commit -m "B commit"
#       git rebase --continue
#
#     PARTIAL MERGE
#
#       git merge --no-ff --no-commit BRANCH
#       git checkout HEAD FILES_TO_DO_NOT_MERGE
#       git add FILES
#       git commit
#
#     REVERT MERGE
#
#       git revert -m 1 MERGE_COMMIT
#
# ==================== BimbaLaszlo (.github.io|gmail.com) ====================

[user]

  name              = "BimbaLaszlo"
  email             = "bimbalaszlo@gmail.com"

[alias]
  rc                = "config --global --edit"

  # __ REMOTE RELATED _____________________

  cl                = "clone --recursive"
  ps                = "push --all"
  pl                = "pull --all"
  seto              = "remote set-url origin"
  ghcl              = "!sh -c 'git clone --recursive https://www.github.com/$*' -"
  ghps              = "!sh -c 'git remote set-url origin https://www.github.com/$*; git push --all --follow-tags --set-upstream https://www.github.com/$*' -"
  glcl              = "!sh -c 'git clone --recursive https://gitlab.com/$*' -"
  glps              = "!sh -c 'git remote set-url oigin https://gitlab.com/$*; git push --all --follow-tags --set-upstream https://gitlab.com/$*' -"

  # __ STATUS _____________________________

  s                 = "status --short --branch"
  sb                = "!echo 'CONTAINS/MERGED WITH THE CURRENT BRANCH' ; git branch -vv --merged ; echo '\nNON MERGED WITH THE CURRENT BRANCH' ; git branch -vv --no-merged"
  sba               = "!echo 'CONTAINS/MERGED WITH THE CURRENT BRANCH' ; git branch -vv --all --merged ; echo '\nNON MERGED WITH THE CURRENT BRANCH' ; git branch -vv --all --no-merged"
  sr                = "remote show origin"

  # __ LOG ________________________________

  l                 = "log --graph --date-order --date=short --format='%C(auto)%h%C(auto)%d %C(bold blue)%ad %an%n        %s%C(reset)'"
  lg                = "log --graph --date-order"
  lgg               = "log --graph --date-order --name-status"
  gslog             = "log --graph --date-order --stat"
  lp                = "log --graph --date-order --patch --stat --ignore-blank-lines"
  changelog         = "log --graph --date-order --name-status ORIG_HEAD.."
  day               = "log --graph --date-order --name-status --since midnight"
  yday              = "log --graph --date-order --name-status --since=day.before.yesterday.midnight --until=midnight"
  dfs               = "diff --name-status"
  ls                = "ls-tree -r --name-only"

  # __ DIFF _______________________________

  df                = "diff --patch --stat --ignore-blank-lines"
  dfc               = "diff --patch --stat --ignore-blank-lines --cached"
  dfw               = "diff --patch --stat --ignore-blank-lines --color-words"
  dfwc              = "diff --patch --stat --ignore-blank-lines --color-words --cached"
  gdf               = "difftool"

  # __ CHECKOUT ___________________________

  co                = "checkout"
  coa               = "checkout :/"
  coi               = "checkout-index -f"
  coo               = "checkout --ours"
  cot               = "checkout --theirs"

  # __ BRANCH _____________________________

  b                 = "branch"

  # __ BISECT _____________________________

  # git bisect start HEAD   Start bisecting and mark HEAD as bad
  # git bisect good SHA     Mark SHA as good - Git will checkout in the middle
  #                         of they
  # git bisect good/bad     Mark the actual checkout
  # git bisect reset        End of bisecting
  bss               = "bisect start"
  bsr               = "bisect reset" # stop
  bsg               = "bisect good"
  bsb               = "bisect bad"

  # __ ADD ________________________________

  ad                = "add --all"
  ada               = "add --all :/"

  # __ COMMIT _____________________________

  c                 = "commit"
  ca                = "commit --amend"
  cm                = "commit -m"
  cmu               = "commit -m Update"

  # fixup:  merge without changing the commit message
  # squash: the commit message is editable
  cfu               = "commit --fixup"
  csq               = "commit --squash"

  # __ STASH ______________________________

  st                = "stash"
  sts               = "stash show"
  stp               = "stash pop"
  std               = "stash drop"

  # __ REBASE _____________________________

  rb                = "rebase --autosquash --interactive"
  rbc               = "rebase --continue"
  rba               = "rebase --abort"

  # __ INVOKING SCRIPTS ___________________

  ctags             = "!~/.git_template/.bin/ctags"

[core]

  editor            = "gvim --nofork"

  ; Do not modify EOL.
  autocrlf          = "false"

  ; Handles very slow the Windows network drives without these settings, but
  ; it require at least 1.9.4.
  ; http://stackoverflow.com/a/24045966
  preloadindex      = "true"
  fscache           = "true"

  ; Global .gitignore file.
  excludesfile      = "~/.git_template/.global_gitignore"

[color]

  ui                = "true"

[init]

  ; Template directory which is copied to .git. For example:
  ; templatedir/hooks -> .git/hooks
  ; http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  ; Filenames starting with dot (.hidden) does not copied.
  templatedir       = "~/.git_template"

[commit]

  ; Additional text which appears on the top of commit message as a comment.
  template          = "~/.git_template/.commit_message"

[log]

  ; Abbreviate SHA to 7 chars.
  abbrevCommit      = "true"

  ; 2014-03-25 12:34:56 +0100
  date              = "iso"

  ; Track the full history of a file (follows file renames when viewing a
  ; single file's log).
  follow            = "true"

  ; Show ref names too (origin/master, tags, etc.).
  decorate          = "true"

[diff]

  ; Find renamed and copied files.
  renames           = "copies"
  tool              = "gvimdiff"

[merge]

  ; Allways create (empty) merge commits.
  ff                = "false"
  tool              = "gvimdiff"

[fetch]

  ; Allways update all submudolues.
  recurseSubmodules = "true"

[pull]

  ; Fast forward if it possible (adds an empty merge commit if it has to).
  ff                = "true"

[push]

  default           = "current"

  ; Push tags.
  followTags        = "true"

[gc]

  ; Minimalize the number of objects in the .git dir (speeds up the things a
  ; bit).
  auto              = 256
