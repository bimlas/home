# .gitconfig: git configuration
#
# USEFUL COMMANDS:
#
#   git log --grep'regex'
#     Look for expression in commit messages.
#
#   git log -S'string' -- file
#     Look for the addition/deletion of text - ie. when was the string firstly
#     introduced or where was it removed.
#
#   git log -G'regex' -- file
#     Look for differences whose patch text contains modified lines that match
#     <regex>.
#
#   git log -L '/int main/',/^}/:main.c
#     Shows how the function main() in the file main.c evolved over time.
#
# ========== BimbaLaszlo (.github.io|gmail.com) ========== 2015.08.31 13:34 ==

[user]

  name         = "BimbaLaszlo"
  email        = "bimbalaszlo@gmail.com"

[alias]

  cl           = "clone"
  ps           = "push --all --follow-tags"
  pl           = "!git pull --ff-only                                         \
                  || (git status; read -p '\nCONTINUE PULLING? Y/[N]' ans;    \
                  if echo $ans | grep '[Yy]' > /dev/null; then git pull; fi)"
  subpl        = "!git submodule foreach git pull --tags origin master"
  ; TODO: origin/HEAD does not changing after this - `git remote update`
  ; updates it only one time.
  seto         = "remote set-url origin"
  ; Found another solution.
  ; ... but does not works - using on a repository without remote causes full
  ; fuckoff.
  # seto         = "!sh -c 'git remote rm origin; git remote add origin $*; git remote update' -"

  s            = "status"
  mylog        = "log --graph --decorate --all --find-renames --date-order"
  glog         = "!git mylog --name-status"
  clog         = "!git mylog --name-status ORIG_HEAD.."
  slog         = "!git mylog --format='%C(auto)%h %C(bold blue)%ad %an%C(auto)%d%n        %s%C(reset)' --date=short"
  sslog        = "!git slog --simplify-by-decoration"
  day          = "!git glog --since midnight"
  yday         = "!git glog --since=day.before.yesterday.midnight --until=midnight"
  flog         = "diff --name-status"
  ls           = "ls-tree -r --name-only"

  df           = "difftool"
  gdf          = "difftool --gui"

  ad           = "add --all"
  ada          = "!git ad :/"
  c            = "commit"
  cfu          = "!sh -c 'git c --fixup=$1 && git reb $1~' -"
  csq          = "!sh -c 'git c --squash=$1 && git reb $1~' -"
  cm           = "!git c -m"
  cmu          = "!git cm Update"
  adac         = "!git ada && git c"
  adacfu       = "!git ada && git cfu"
  adacsq       = "!git ada && git csq"
  adacm        = "!git ada && git cm"
  adacmu       = "!git ada && git cmu"

  co           = "checkout"

  st           = "stash"
  stp          = "!git st pop"
  reb          = "!git rebase --autosquash -i"

  ghcl         = "!sh -c 'git cl https://www.github.com/$*' -"
  ghps         = "!sh -c 'git seto https://www.github.com/$*; git ps --set-upstream https://www.github.com/$*' -"
  glcl         = "!sh -c 'git cl https://gitlab.com/$*' -"
  glps         = "!sh -c 'git seto https://gitlab.com/$*; git ps --set-upstream https://gitlab.com/$*' -"

  ctags        = "!.git/hooks/0_ctags"

[core]

  editor       = "vim --nofork"

  ; Ne konvertalja a sorvegzodeseket.
  autocrlf     = "false"

  ; Windows halozati meghajtokon nagyon lassu, ez gyorsitja a dolgokat, de
  ; legalabb 1.9.4 verzio kell.
  ; http://stackoverflow.com/a/24045966
  preloadindex = "true"
  fscache      = "true"

[color]

  ui           = "true"

[init]

  ; A konyvtar, amit init es clone eseten bemasol a .git konvytarba. Pl.:
  ; templatedir/hooks -> .git/hooks
  ; http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  templatedir  = "~/.git_template"

[commit]

  ; Az alapertelmezett uzenet, amit commit-olas kozben a szokasos elemek ele
  ; kiir.
  template     = "~/.git_template/commit_message"

[log]

  ; Roviditett SHA.
  abbrevCommit = "true"

  ; 2014-03-25 12:34:56 +0100
  date         = "iso"

[diff]

  tool         = "vimdiff"

[merge]

  tool         = "vimdiff"

[push]

  default      = "simple"

[gc]

  ; Fajlok szamanak minimalizalasa a .git konyvtarban. (valamennit gyorsit)
  auto         = 256
