; .gitconfig: git configuration
;
; To get all of current settings:
;
;   git congig --list
;
; To get only certain setting:
;
;   git config --get core.editor
;
; GIT STYLE GUIDE
;
;   Branch naming, commit message format, etc.
;
;     https://github.com/agis-/git-style-guide
;
; PATHSPEC
;
;   List all PHP files (in the whole repo, ignore case), but exclude
;   everything in the 'vendor' directory (not itself) and 'log.txt' files
;   anywhere in the '/test'.
;
;   git log ':(top,icase)**.PHP' ':!/vendor/**' ':!/test/**/log.txt'
;
;   See https://git-scm.com/docs/gitglossary#def_pathspec for details.
;
; WEIRD CHARACTERS ON OUTPUT
;
;   set LC_ALL=hu_HU.UTF-8
;
; DELETE UNTRACKED FILES
;
;   git clean -f
;
;   -n
;     Don't actually remove anything, just show what would be done.
;
;   -d
;     Remove untracked directories in addition to untracked files.
;
;   -x
;     Don't use the standard ignore rules read from .gitignore (per directory)
;     and $GIT_DIR/info/exclude.
;
;   -X
;     Remove only files ignored by Git.
;
; REMOVE GITIGNORED FILES
;
;   Remove all cached files to ensure there are no .gitignore files being
;   tracked:
;
;   git rm --cached -r :/
;
;   Track the files that should be tracked
;
;   git add :/
;
; REDUCE THE SIZE OF REPO
;
;   It may compress up to half size!
;
;   git gc --aggressive
;
;   Usually git gc runs very quickly while providing good disk space
;   utilization and performance. This option will cause git gc to more
;   aggressively optimize the repository at the expense of taking much more
;   time. The effects of this optimization are persistent, so this option only
;   needs to be used occasionally; every few hundred changesets or so.
;
; RECOVER DELETED COMMITS/BRANCHES
;
;   git reflog
;   # Look for the last commit on the deleted branch.
;   git branch DELETED_BRANCH LAST_COMMIT
;
;   You can use the `log` options on reflog to narrow the list, for example:
;
;   git reflog -G 'missing line'
;
; UPDATE TOPIC BRANCH WITH MASTER (WITHOUT MERGING TO IT)
;
;   git checkout FEATURE
;   git merge master
;
;   Do not `rebase master FEATURE`! More information:
;   http://stackoverflow.com/a/28505516
;
; SPLIT A COMMIT TO SMALLER COMMITS
;
;   git rebase COMMIT_TO_SPLIT~
;   # Modify `pick` to `edit`.
;   git reset HEAD~
;   git add FILES_FOR_A_COMMIT
;   git commit -m "A commit"
;   git add FILES_FOR_B_COMMIT
;   git commit -m "B commit"
;   git rebase --continue
;
; CHECKOUT (ARCHIVE) FILES/REVISIONS TO OUTSIDE OF REPOSITORY
;
;   git archive -o /path/to/output.zip HEAD -- FILE
;
;   For example to compare binary files before/after COMMIT, use this:
;
;   git archive -o /path/to/new.zip COMMIT  -- FILE
;   git archive -o /path/to/old.zip COMMIT~ -- FILE
;
;   Or archive the changed files:
;
;   git archive -o /path/to/output.zip HEAD -- $(git diff --name-only FROM..TO)
;
; CREATE A DISCONNECTED (PARALLEL) BRANCH
;
;   git checkout --orphan NEW
;   rm -rf .
;   # Add files.
;   git add :/
;   git commit -m 'Initial commit'
;
; ==================== BimbaLaszlo (.github.io|gmail.com) ====================

[user]                                                                  ; {{{1

  name  = "bimlas"
  email = "bimbalaszlo@gmail.com"

[alias]                                                                 ; {{{1

  ; Open Git shell on Windows should looks like this:
  ;
  ;   sh = "!cd `[ $GIT_PREFIX ] && echo $GIT_PREFIX || pwd` ; bash --login -i"
  ;
  ; But for some reason ^C closes the /bin/bash shell, but the /usr/bin/bash
  ; shell works as it has to. Since the Git aliases which starts with bang
  ; (e.g. '!shell --command') executed in /bin/bash shell, I have to do the
  ; alias outside of .gitconfig. For example here's a PowerShell alias:
  ;
  ;   function gitBash { c:\app\git\usr\bin\bash --login -i }
  ;   Set-Alias gsh gitBash

  ; Edit .gitconfig
  ; rc = "config --global --edit"
  rc = "!gvim $HOME/.gitconfig &"

  ; Find keywords.
  kw = "keywords --all"

  ; __ REMOTE RELATED _____________________                               {{{2

  cl = "clone --recursive"

  ; Push and track the current branch.
  ; See 'push.default'
  ps = "push --set-upstream"
  ; See https://developer.atlassian.com/blog/2015/04/force-with-lease/?utm_source=medium&utm_medium=blog&utm_campaign=lesser-git
  psforce = "push --set-upstream --force-with-lease"

  ; Push and track those remote branches.
  psa = "push --all"
  psaforce = "push --force-with-lease --all"

  ; Push tags.
  pst = "push --tags"

  ; Push to origin (used to delete remote branch).
  pso = "push origin"

  seto = "remote set-url origin"

  ; Add and set (if already exists) 'origin', than push it.
  ghcl = "!sh -c 'git clone --recursive https://www.github.com/$*' -"
  ghps = "!sh -c 'git remote add origin https://www.github.com/$* ;   \
          git push --all --set-upstream https://www.github.com/$*' -"
  glcl = "!sh -c 'git clone --recursive https://gitlab.com/$*' -"
  glps = "!sh -c 'git remote add origin https://www.github.com/$* ;   \
          git push --all --set-upstream https://gitlab.com/$*' -"

  ; Use `fetch` instead of `pull`:
  ;
  ; * Detect diverged branches without doing an undesired merge
  ; * Decidable merge/rebase
  ;
  ; If there are no commits added locally, just update the branch pointer:
  ;
  ;   $ git merge --ff
  ;
  ; To rebase on the top of the origin/CURRENT_BRANCH just run
  ;
  ;   $ git rebase
  ;
  ; To merge with it:
  ;
  ;   $ git merge

  f  = "fetch"

  ; __ STATUS _____________________________                               {{{2

  s   = "status --short --branch"
  sb  = "branch-status"
  sba = "branch-status --all"
  sr  = "remote show origin"

  ; __ LOG ________________________________                               {{{2

  ; --all                           Show all branch/tag/remote
  ; --branches, --tags, --remotes   Guess
  ; --source                        Show ref (exists branch) for all commits
  ;
  ; See DIFF for additional parameters (and pickaxe (-G and -S) too).
  ;
  ; Look for expression in commit messages.
  ;
  ;   git log --grep'regex'

  l    = "log --graph --date-order --date=short --format=shortlog"
  la   = "log --graph --date-order --date=short --format=shortlog --all"
  las  = "log --graph --date-order --date=short --format=shortlog --all --simplify-by-decoration"
  lg   = "log --graph --date-order"
  lgg  = "log --graph --date-order --name-status"
  lp   = "log --graph --date-order --patch --stat --ignore-blank-lines"
  lm   = "log --graph --merge --left-right --format=shortlog --all"
  lmg  = "log --graph --merge --left-right --all"
  day  = "log --graph --date-order --all --since midnight"
  yday = "log --graph --date-order --all --since=day.before.yesterday.midnight --until=midnight"

  ; Show `local...remote` if both side exists.
  lf  = "fetch-log --format=shortlog"
  lfg = "fetch-log"

  ; Formated for mail to my boss.
  ; The last Sed command removes the metainformation (keywords, issue number,
  ; etc.)
  ; tmail shows the log from the last tag only.
  mail = "!git log --format=mail $@ | sed '/!TITLE!/! s/.*/  &/; s/!TITLE! //; /^\\s*_\\+$/,/^\\s*$/d'; #"
  tmail = "!git log --format=mail `git describe --tags --no-abbrev`.. | sed '/!TITLE!/! s/.*/  &/; s/!TITLE! //; /^\\s*_\\+$/,/^\\s*$/d'; #"

  ; __ SHOW _______________________________                               {{{2

  ; To see a specific version of a file:
  ;
  ;   git show REVISION:file
  ;   git show :file          # To show HEAD

  sw  = "show --patch --stat --ignore-blank-lines"
  sww = "show --patch --stat --ignore-blank-lines --color-words"

  ; __ DIFF _______________________________                               {{{2

  ; -w                    Ignore whitespace diffs
  ; --color-words         Show the exact diffs
  ; --diff-filter         Filter files: A|C|D|M|R|T|U|X|B
  ; -U123                 Show 123 lines of context around hunk
  ; --ignore-space-at-eol Ignore EOL changes
  ;
  ; Look for the addition/deletion of text - ie. when was the string
  ; firstly introduced or where was it removed (when using with `log`).
  ;
  ;   git log -S'string' -- file
  ;
  ; Look for differences whose patch text contains modified lines that
  ; match <regex>.
  ;
  ;   git log -G'regex' -- file
  ;
  ; Shows how the function main() in the file main.c evolved over time.
  ;
  ;   git log -L '/int main/',/^}/:main.c

  df   = "diff --patch --stat --ignore-blank-lines"
  dfc  = "diff --patch --stat --ignore-blank-lines --cached"
  dfw  = "diff --patch --stat --ignore-blank-lines --color-words"
  dfwc = "diff --patch --stat --ignore-blank-lines --color-words --cached"
  dfs  = "diff --name-status"
  gdf  = "difftool"

  ; __ GREP _____________________________

  ; Some cool tips:
  ;  http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/

  g = "grep --break --line-number --heading --context 3"

  ; __ CHECKOUT ___________________________                               {{{2

  ; -m  --merge  Check out the initial "before merge conflict state"

  co  = "checkout"
  coa = "checkout :/"
  coi = "checkout-index -f"
  coo = "checkout --ours"
  cot = "checkout --theirs"

  ; __ BRANCH _____________________________                               {{{2

  ; -m  --move  Rename branch
  ; -u          Set upstream of branch (git branch -u origin/feat)
  ;
  ; Delete remote branch (aka push an empty branch to remote like
  ; LOCAL:REMOTE)
  ;
  ;   git push origin :BRANCH_TO_DELETE

  b = "branch"

  ; __ MERGE ______________________________                               {{{2

  ; Edit merge commit message.
  ;
  ;   git merge -e
  ;
  ; Populate the log message with one-line descriptions from at most <n>
  ; actual commits that are being merged.
  ;
  ;   git merge -e --log
  ;
  ; Check if merge occurs conflicts ("dry run")
  ;
  ;   git merge --no-ff --no-commit
  ;   git merge --abort # If something went wrong
  ;   git commit        # If everything is ok
  ;
  ; Partial merge
  ;
  ;   git merge --no-ff --no-commit BRANCH
  ;   git checkout --ours FILES_TO_DO_NOT_MERGE
  ;   git add FILES
  ;   git commit
  ;
  ; Revert merge
  ;
  ;   git revert -m 1 MERGE_COMMIT
  ;
  ; Resolve a binary merge
  ;
  ;   git checkout --ours   -- <path/to/conflicted_file>
  ;   git checkout --theirs -- <path/to/conflicted_file>
  ;
  ;   where "ours" is the file in the current branch and "theirs" is the file
  ;   from the branch we want to merge.
  ;
  ; Rebase + squash merge
  ;
  ;   git checkout feature
  ;   git rebase master       # Needed because it's fast-forwarding merge
  ;   git checkout master
  ;   git merge --ff-only --squash feature
  ;   git commit
  ;   git branch -d feature   # We don't need anymore

  me  = "merge"
  mef = "merge --ff-only"
  mea = "merge --abort"

  ; __ BISECT _____________________________                               {{{2

  ; git bisect start HEAD   Start bisecting and mark HEAD as bad
  ; git bisect good/bad     Mark the actual checkout
  ; git bisect good SHA     Mark SHA as good - Git will checkout in the middle of good and bad
  ; git bisect reset        End of bisecting

  bss = "bisect start"
  bsr = "bisect reset" # stop
  bsg = "bisect good"
  bsb = "bisect bad"

  ; __ ADD ________________________________                               {{{2
  ;
  ; Press `?` in `add --patch` to know more about the options.

  adu = "add --update"
  ada = "add --all"
  adp = "add --patch"

  ; __ COMMIT _____________________________                               {{{2

  c   = "commit"
  ca  = "commit --amend"
  cam = "commit --amend --reuse-message=HEAD"
  cm  = "commit -m"
  cmu = "commit -m Update"

  ; fixup   merge without changing the commit message
  ; squash  the commit message is editable

  cfu = "commit --fixup"
  csq = "commit --squash"

  ; __ STASH ______________________________                               {{{2

  ; You can write a note about the stash like this:
  ; $ git stash save "Buggy - find a better way"
  ;
  ; To apply more stashes, apply the first one, then `git add --all`, apply
  ; the next one, etc.

  ; Stash, but keep staged files.
  st  = "stash save --keep-index --include-untracked"
  stl = "stash list"
  sts = "stash show"
  sta = "stash apply"
  std = "stash drop"
  stp = "stash pop"

  ; Usage: git str 'stash@{123}'
  str = "!git stash show $@ --patch | git apply --reverse; #"

  ; __ REBASE _____________________________                               {{{2
  ; WARNING: `rebase master` means that the current branch is moved to the end
  ; of `master` and `rebase master dev` does the same with `dev` instead of
  ; the current one!

  ; -p  --preserve-merges  Rebase merge commits too
  ;
  ; To rebase a merge commit:
  ;
  ;   git rebase --preserve-merges MERGE_SHA~
  ;
  ; For rebase + squah a feature branch, see merge.

  rb  = "rebase"
  rbi = "rebase --interactive"
  rbc = "rebase --continue"
  rba = "rebase --abort"

  ; __ CHERRY-PICK ________________________                               {{{2

  cr = "cherry-pick -n"

  ; __ SUBMODULE __________________________                               {{{2

  ; You have to run this first after pulling a repo with a commit which adds a
  ; new submodule to it.
  subi = "submodule update --init --recursive"

  ; __ FRAMEWORK-RELATED COMMANDS _________                               {{{2

  ; RUBY
  rails = "!bin/rails"

  ; PHP
  codecept = "!vendor/bin/codecept"

[core]                                                                  ; {{{1

  ; Create symlinks on Windows too.
  ; https://github.com/git-for-windows/git/wiki/Symbolic-Links
  symlinks = "true"

  editor = "gvim --nofork"

  ; Do not break long lines (useful for log --graph with a bunch of branches).
  pager = "diff-so-fancy | less --tabs=4 -SRFX"

  ; Do not modify EOL.
  autocrlf = "false"

  ; Handles very slow the Windows network drives without these settings, but
  ; it require at least 1.9.4.
  ; http://stackoverflow.com/a/24045966
  preloadindex = "true"
  fscache      = "true"

  ; Common template directory ("symlink" instead of copy as `templateDir`
  ; doing):
  ; By default Git will look for your hooks in the $GIT_DIR/hooks directory.
  ; Set this to different path, e.g. /etc/git/hooks, and Git will try to find
  ; your hooks in that directory, e.g. /etc/git/hooks/pre-receive instead of
  ; in $GIT_DIR/hooks/pre-receive.
  ; http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  hooksPath = "~/.gitconfig_files/hooks"

  ; Global .gitignore file.
  excludesfile = "~/.gitconfig_files/core_excludesfile"

[color]                                                                 ; {{{1

  ui = "true"

[color "grep"]

  linenumber = "red"
  separator  = "cyan"
  function   = "cyan"
  match      = "green"
  filename   = "white bold"

[interactive]                                                           ; {{{1

  diffFilter = "diff-so-fancy"

[commit]                                                                ; {{{1

  ; Include the diff in to the commit message (scissors mode).
  verbose = "true"

  ; Additional text which appears on the top of commit message as a comment.
  template = "~/.gitconfig_files/commit_template"

[log]                                                                   ; {{{1

  ; Abbreviate SHA to 7 chars.
  abbrevCommit = "true"

  ; 2014-03-25 12:34:56 +0100
  date = "iso"

  ; Track the full history of a file (follows file renames when viewing a
  ; single file's log).
  follow = "true"

  ; Show ref names too (origin/master, tags, etc.).
  decorate = "true"

[pretty]                                                                ; {{{1

  shortlog = "%C(auto)%h%C(auto)%d %C(bold blue)%ad %an%n  %s%C(reset)"
  mail     = "!TITLE! * %s%n%+b"

[grep]

  ; Let Git grep usable outside of repository too.
  fallbackToNoIndex = "true"

[diff]                                                                  ; {{{1

  ; Find renamed and copied files.
  renames   = "copies"
  tool      = "gvimdiff"
  algorithm = "patience"

  ; Well structured hunks:
  ; Needs 2.9
  compactionHeuristic = "true"
  ; Needs 2.11
  indentHeuristic = "true"

[rebase]                                                                ; {{{1

  autoSquash = "true"

[merge]                                                                 ; {{{1

  ; Allways create (empty) merge commits.
  ff   = "false"
  tool = "gvimdiff"

[credential]                                                            ; {{{1

  ; Store username/password in memory.
  ; Needs to "Enable Git Credential Manager" during Msys-Git install; to list
  ; stored credentials, use `cmdkey /list`.
  ; For Linux use `cache`.
  helper = "wincred"

[fetch]                                                                 ; {{{1

  ; Allways update all submudolues.
  recurseSubmodules = "true"

  ; Make sure that any branches that were deleted on the remote are also
  ; deleted locally (but won't delete any locally checked-out branches, those
  ; are different from remote-tracking branches).
  prune = "true"

[push]                                                                  ; {{{1

  ; `git push -u` is enough instead of `git push -u origin my_branch`.
  default = "current"

  ; Push tags.
  followTags = "true"

[gc]                                                                    ; {{{1

  ; Minimalize the number of objects in the .git dir (speeds up the things a
  ; bit).
  auto = 256

[gui]                                                                   ; {{{1

  encoding = "utf-8"
