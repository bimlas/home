# .gitconfig: git configuration
#
# USEFUL COMMANDS:
#
#   LOG
#
#     Flags:
#
#       --branches  show all branch (SHA..SHA not works with it?)
#
#     Look for expression in commit messages.
#
#       git log --grep'regex'
#
#     Look for the addition/deletion of text - ie. when was the string
#     firstly introduced or where was it removed.
#
#       git log -S'string' -- file
#
#     Look for differences whose patch text contains modified lines that
#     match <regex>.
#
#       git log -G'regex' -- file
#
#     Shows how the function main() in the file main.c evolved over time.
#
#       git log -L '/int main/',/^}/:main.c
#
#   OTHER
#
#     Use this to resolve a binary merge:
#
#       git checkout --ours   -- <path/to/conflicted_file>
#       git checkout --theirs -- <path/to/conflicted_file>
#
#     where "ours" is the file in the current branch and "theirs" is the file
#     from the branch we want to merge.
#
#     Delete untracked files and directories. Add `-n` to just show the
#     affected files/directories.
#
#       git clean -fd
#
#     Split a commit to smaller commits.
#
#       git rebase COMMIT_TO_SPLIT~
#       # Modify `pick` to `edit`.
#       git reset HEAD~
#       git add FILES_FOR_A_COMMIT
#       git commit -m "A commit"
#       git add FILES_FOR_B_COMMIT
#       git commit -m "B commit"
#       git rebase --continue
#
#
# ==================== BimbaLaszlo (.github.io|gmail.com) ====================

[user]

  name  = "BimbaLaszlo"
  email = "bimbalaszlo@gmail.com"

[alias]
  cl     = "clone"
  ps     = "push --all --follow-tags"
  pl     = "pull"
  subpl  = "!git submodule foreach git pull --tags origin master"
  seto   = "remote set-url origin"
  ghcl   = "!sh -c 'git clone https://www.github.com/$*' -"
  ghps   = "!sh -c 'git remote set-url origin https://www.github.com/$*; git push --all --follow-tags --set-upstream https://www.github.com/$*' -"
  glcl   = "!sh -c 'git clone https://gitlab.com/$*' -"
  glps   = "!sh -c 'git remote set-url oigin https://gitlab.com/$*; git push --all --follow-tags --set-upstream https://gitlab.com/$*' -"

  s      = "status --short --branch"
  mylog  = "log --graph --decorate --find-renames --date-order"
  slog   = "!git mylog --date=short --format='%C(auto)%h%C(auto)%d %C(bold blue)%ad %an%n        %s%C(reset)'"
  sslog  = "!git mylog --date=short --format='%C(auto)%h%C(auto)%d %C(bold blue)%ad %an%n        %s%C(reset)' --simplify-by-decoration"
  glog   = "!git mylog --name-status"
  gslog  = "!git mylog --stat"
  plog   = "!git mylog --patch --stat --ignore-blank-lines"
  pwlog  = "!git mylog --patch --stat --ignore-blank-lines --ignore-all-space"
  flog   = "diff --name-status"
  clog   = "!git mylog --name-status ORIG_HEAD.."
  day    = "!git mylog --name-status --since midnight"
  yday   = "!git mylog --name-status --since=day.before.yesterday.midnight --until=midnight"
  ls     = "ls-tree -r --name-only"

  mydiff = "diff --patch --stat --ignore-blank-lines"
  df     = "!git mydiff"
  dfc    = "!git mydiff --cached"
  dfw    = "!git mydiff --ignore-all-space"
  dfwc   = "!git mydiff --ignore-all-space --cached"
  gdf    = "difftool"
  gdfc   = "difftool --cached"

  co     = "checkout"
  coo    = "checkout --ours"
  cot    = "checkout --theirs"

  bss    = "bisect start"
  bsr    = "bisect reset" # stop
  bsg    = "bisect good"
  bsb    = "bisect bad"

  ad     = "add --all"
  ada    = "add --all :/"

  c      = "commit"
  ca     = "commit --amend"
  cm     = "commit -m"
  cmu    = "commit -m Update"

  # fixup:  merge without changing the commit message
  # squash: the commit message is editable
  cfu    = "!git commit --fixup=$1"
  csq    = "!git commit --squash=$1"

  st     = "stash"
  sts    = "stash show"
  stp    = "stash pop"
  std    = "stash drop"

  rb     = "rebase --autosquash --interactive"
  rbc    = "rebase --continue"
  rba    = "rebase --abort"

  ctags  = "!.git/hooks/0_ctags"

[core]

  editor = "gvim --nofork"

  ; Do not modify EOL.
  autocrlf = "false"

  ; Handles very slow the Windows network drives without these settings, but
  ; it require at least 1.9.4.
  ; http://stackoverflow.com/a/24045966
  preloadindex = "true"
  fscache      = "true"

[color]

  ui = "true"

[init]

  ; A konyvtar, amit init es clone eseten bemasol a .git konvytarba. Pl.:
  ; templatedir/hooks -> .git/hooks
  ; http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  templatedir = "~/.git_template"

[commit]

  ; Az alapertelmezett uzenet, amit commit-olas kozben a szokasos elemek ele
  ; kiir.
  template = "~/.git_template/commit_message"

[log]

  ; Abbreviate SHA to 7 chars.
  abbrevCommit = "true"

  ; 2014-03-25 12:34:56 +0100
  date = "iso"

  ; Track the full history of a file (follows file renames when viewing a
  ; single file's log).
  follow = "true"

[diff]

  tool = "gvimdiff"

[merge]

  tool = "gvimdiff"

[push]

  default = "current"

[gc]

  ; Fajlok szamanak minimalizalasa a .git konyvtarban. (valamennit gyorsit)
  auto = 256
