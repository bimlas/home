; .gitconfig: git configuration
;
; To get all of current settings:
;
;   git congig --list
;
; To get only certain setting:
;
;   git config --get core.editor
;
; GIT STYLE GUIDE
;
;   Branch naming, commit message format, etc.
;
;     https://github.com/agis-/git-style-guide
;
; PATHSPEC
;
;   List all PHP files (in the whole repo, ignore case), but exclude
;   everything in the 'vendor' directory (not itself) and 'log.txt' files
;   anywhere in the '/test'.
;
;   git log ':(top,icase)**.PHP' ':!/vendor/**' ':!/test/**/log.txt'
;
;   See https://git-scm.com/docs/gitglossary#def_pathspec for details.
;
; WEIRD CHARACTERS ON OUTPUT
;
;   set LC_ALL=hu_HU.UTF-8
;
; DELETE UNTRACKED FILES
;
;   git clean -f
;
;   -n
;     Don't actually remove anything, just show what would be done.
;
;   -d
;     Remove untracked directories in addition to untracked files.
;
;   -x
;     Don't use the standard ignore rules read from .gitignore (per directory)
;     and $GIT_DIR/info/exclude.
;
;   -X
;     Remove only files ignored by Git.
;
; UNTRACK GITIGNORED FILES (WITHOUT DELETING THE FILE ITSELF)
;
;   Remove all cached files to ensure there are no .gitignore files being
;   tracked:
;
;   git rm --cached -r :/
;
;   Track the files that should be tracked
;
;   git add :/
;
; REDUCE THE SIZE OF REPO
;
;   It may compress up to half size!
;
;   git gc --aggressive
;
;   Usually git gc runs very quickly while providing good disk space
;   utilization and performance. This option will cause git gc to more
;   aggressively optimize the repository at the expense of taking much more
;   time. The effects of this optimization are persistent, so this option only
;   needs to be used occasionally; every few hundred changesets or so.
;
; RECOVER DELETED COMMITS/BRANCHES
;
;   git reflog
;   # Look for the last commit on the deleted branch.
;   git branch DELETED_BRANCH LAST_COMMIT
;
;   You can use the `log` options on reflog to narrow the list, for example:
;
;   git reflog -G 'missing line'
;
; UPDATE TOPIC BRANCH WITH MASTER (WITHOUT MERGING TO IT)
;
;   git checkout FEATURE
;   git merge master
;
;   Do not `rebase master FEATURE`! More information:
;   http://stackoverflow.com/a/28505516
;
; SPLIT A COMMIT TO SMALLER COMMITS
;
;   git rebase COMMIT_TO_SPLIT~
;   # Modify `pick` to `edit`.
;   git reset HEAD~
;   git add FILES_FOR_A_COMMIT
;   git commit -m "A commit"
;   git add FILES_FOR_B_COMMIT
;   git commit -m "B commit"
;   git rebase --continue
;
; EXTRACT THE HISTORY OF A FILE
;
;   # https://gist.github.com/ssp/1663093
;
;   git clone git@github.com:me/myrepo.git && cd myrepo
;   # Reduce the repository to just the subfolder which contains the
;   # interesting file(s)
;   git filter-branch --prune-empty --subdirectory-filter files/dir -- --all
;   git filter-branch --force --prune-empty --index-filter \
;     'git rm --cached --ignore-unmatch \
;     $(git ls-files | grep -v "files.rb\|to.py\|extract.sh")'
;
; CHECKOUT (ARCHIVE) FILES/REVISIONS TO OUTSIDE OF REPOSITORY
;
;   git archive -o /path/to/output.zip HEAD -- FILE
;
;   For example to compare binary files before/after COMMIT, use this:
;
;   git archive -o /path/to/new.zip COMMIT  -- FILE
;   git archive -o /path/to/old.zip COMMIT~ -- FILE
;
;   Or archive the changed files:
;
;   git archive -o /path/to/output.zip HEAD -- $(git diff --name-only FROM..TO)
;
; CREATE A DISCONNECTED (PARALLEL) BRANCH
;
;   git checkout --orphan NEW
;   rm -rf .
;   # Add files.
;   git add :/
;   git commit -m 'Initial commit'
;
; MERGE REPOSITORIES
;
;   cd path/to/project-b
;   git remote add project-a path/to/project-a
;   git fetch project-a
;   git merge --allow-unrelated-histories project-a/master
;   git remote remove project-a
;
; ==================== BimbaLaszlo (.github.io|gmail.com) ====================

[user]                                                                  ; {{{1

  name  = "bimlas"
  email = "bimbalaszlo@gmail.com"

[alias]                                                                 ; {{{1

  ; Open Git shell on Windows should looks like this:
  ;
  ;   sh = "!cd `[ $GIT_PREFIX ] && echo $GIT_PREFIX || pwd` ; bash --login -i"
  ;
  ; But for some reason ^C closes the /bin/bash shell, but the /usr/bin/bash
  ; shell works as it has to. Since the Git aliases which starts with bang
  ; (e.g. '!shell --command') executed in /bin/bash shell, I have to do the
  ; alias outside of .gitconfig. For example here's a PowerShell alias:
  ;
  ;   function gitBash { c:\app\git\usr\bin\bash --login -i }
  ;   Set-Alias gsh gitBash

  ; Edit .gitconfig
  ; rc = "config --global --edit"
  rc = "!$EDITOR $HOME/.gitconfig"

  ; Find keywords.
  kw = "keywords --all"

  ; __ REMOTE RELATED _____________________                               {{{2

  cl = "clone --recursive"

  ; Push and track the current branch.
  ; See 'push.default'
  ps = "push --set-upstream"
  ; See https://developer.atlassian.com/blog/2015/04/force-with-lease/?utm_source=medium&utm_medium=blog&utm_campaign=lesser-git
  psforce = "push --set-upstream --force-with-lease"

  ; Push and track those remote branches.
  psa = "push --all"
  psaforce = "push --force-with-lease --all"

  ; Push tags.
  pst = "push --tags"

  ; Deleting remote branch:
  ;
  ;   $ git push origin :remote-branch
  ;
  ; Push branch without checking out:
  ;
  ;   $ git push origin --set upstream local-branch:remote-branch
  pso = "push origin --set-upstream"

  ; Set origin
  seto = "!sh -c 'git remote add origin $*; \
          git remote set-url origin $*; \
          git fetch origin' -"

  ; Add and set (if already exists) 'origin', than push it.
  ghcl = "!sh -c 'git clone --recursive https://github.com/$*.git' -"
  ghps = "!sh -c ' \
          git remote add origin https://github.com/$*.git; \
          git remote set-url origin https://github.com/$*.git; \
          git fetch; \
          git push --set-upstream origin --all; \
          git push --set-upstream origin --tags' -"
  glcl = "!sh -c 'git clone --recursive https://gitlab.com/$*' -"
  glps = "!sh -c ' \
          git remote add origin https://gitlab.com/$*.git; \
          git remote set-url origin https://gitlab.com/$*.git; \
          git fetch; \
          git push --set-upstream origin --all; \
          git push --set-upstream origin --tags' -"

  ; Use `fetch` instead of `pull`:
  ;
  ; * Detect diverged branches without doing an undesired merge
  ; * Decidable merge/rebase
  ; * Update branches without checkout
  ;
  ; If there are no commits added locally, just update the branch pointer:
  ;
  ;   $ git merge --ff-only
  ;
  ; To rebase on the top of the origin/CURRENT_BRANCH just run
  ;
  ;   $ git rebase
  ;
  ; To merge with it:
  ;
  ;   $ git merge
  ;
  ; Update (merge) branches without checkout:
  ;
  ;   $ git fetch origin mybranch:mybranch    # fast-forward only
  ;   $ git fetch origin +mybranch:mybranch   # allow non fast-forward too
  ;   $ git fetch origin a:a b:b              # update more branches at once
  ;   $ git fetch . feature:master            # fast-forward local branches
  ;                                           # (`feature` in to `master`)

  f  = "fetch"
  fo = "fetch origin"

  ; __ STATUS _____________________________                               {{{2

  s   = "!sh -c ' \
         [ $GIT_PREFIX ] && cd $GIT_PREFIX; \
         git status --short --branch $*; \
         echo \"## `git status --porcelain $* | wc -l` files affected\"; \
         git stash list' -"
  sb  = "branch-status"
  sba = "branch-status --all"
  sr  = "remote show origin"

  ; __ LOG ________________________________                               {{{2

  ; --all                           Show all branch/tag/remote
  ; --branches, --tags, --remotes   Guess
  ; --source                        Show ref (exists branch) for all commits
  ;
  ; See DIFF for additional parameters (and pickaxe (-G and -S) too).
  ;
  ; Look for expression in commit messages.
  ;
  ;   git log --grep'regex'

  l    = "log --graph --date=short --format=shortlog"
  la   = "log --graph --date=short --format=shortlog --all"
  las  = "log --graph --date=short --format=shortlog --all --simplify-by-decoration"
  lg   = "log --graph"
  lgg  = "log --graph --name-status"
  lp   = "log --graph --patch --stat --ignore-blank-lines"
  lm   = "log --graph --merge --left-right --format=shortlog --all"
  lmg  = "log --graph --merge --left-right --all"
  day  = "log --graph --all --since midnight"
  yday = "log --graph --all --since=day.before.yesterday.midnight --until=midnight"
  todo = "log --graph --grep 'WIP\\|TODO'"

  ; Show `local...remote` if both side exists.
  lf  = "fetch-log --format=shortlog"
  lfg = "fetch-log"

  ; Formated for mail to my boss.
  ; The last Sed command removes the metainformation (keywords, issue number,
  ; etc.)
  ; tmail shows the log from the last tag only.
  mail = "!git log --format=mail $@ | sed '/!TITLE!/! s/.*/  &/; s/!TITLE! //; /^\\s*_\\+$/,/^\\s*$/d'; #"
  tmail = "!git log --format=mail `git describe --tags --no-abbrev`.. | sed '/!TITLE!/! s/.*/  &/; s/!TITLE! //; /^\\s*_\\+$/,/^\\s*$/d'; #"

  ; __ SHOW _______________________________                               {{{2

  ; To see a specific version of a file:
  ;
  ;   git show REVISION:file
  ;   git show :file          # To show HEAD
  ;
  ; Show merge commit with diff output (note the THREE DOTS in diff):
  ;
  ;   $ git show MERGE_COMMIT
  ;   ...
  ;   Merge: fc17405 ee2de56
  ;   ...
  ;   $ git diff fc17405...ee2de56

  sw  = "show --patch --stat --ignore-blank-lines"
  sww = "show --patch --stat --ignore-blank-lines --color-words"

  ; __ DIFF _______________________________                               {{{2

  ; -w                    Ignore whitespace diffs
  ; --color-words         Show the exact diffs
  ; --diff-filter         Filter files: A|C|D|M|R|T|U|X|B
  ; -U123                 Show 123 lines of context around hunk
  ; --ignore-space-at-eol Ignore EOL changes
  ;
  ; Look for the addition/deletion of text - ie. when was the string
  ; firstly introduced or where was it removed (when using with `log`).
  ;
  ;   git log -S'string' -- file
  ;
  ; Look for differences whose patch text contains modified lines that
  ; match <regex>.
  ;
  ;   git log -G'regex' -- file
  ;
  ; Shows how the function main() in the file main.c evolved over time.
  ;
  ;   git log -L '/int main/',/^}/:main.c
  ;
  ; Find pattern only in modified lines (by hiding all others).
  ;
  ;   git diff -U0 fileA fileB | grep 'regex'
  ;
  ; Pass filenames only to another command.
  ; Escape filenames containing space characters by using NULL as separator
  ; between filenames.
  ;
  ;   git diff --name-only -z ... | xargs -0 ...

  df   = "diff --patch --stat --ignore-blank-lines"
  dfc  = "diff --patch --stat --ignore-blank-lines --cached"
  dfw  = "diff --patch --stat --ignore-blank-lines --color-words"
  dfwc = "diff --patch --stat --ignore-blank-lines --color-words --cached"
  dfs  = "diff --name-status"
  gdf  = "difftool"

  ; __ GREP _____________________________

  ; -I  Case sensitive

  ; Some cool tips:
  ;  http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/

  g = "grep --break --line-number --heading --context 3 --ignore-case"

  ; __ TAG ______________________________                                 {{{2

  ; Annotated tags are meant for release while lightweight tags are meant for
  ; private or temporary object labels. So you could use them to describe a
  ; release without making a release commit.
  ;
  ; Create it with `git tag {-a|--annotate}`. An annotated tag has a message
  ; that can be displayed with `git show`, while a tag without annotations is
  ; just a named pointer to a commit.
  ;
  ; `git describe` without command line options only sees annotated tags (use
  ; `--tags` to show any tag, even unannotated).
  ;
  ; `git push --follow-tags` will only push annotated tags.

  ft   = "!git tag -l | xargs git tag -d; git fetch --tags"
  lt   = "tag -n --sort=creatordate"
  tday = "!git tag `date +'%Y-%m-%d'`"

  ; __ CHECKOUT ___________________________                               {{{2

  ; -m  --merge  Check out the initial "before merge conflict state"
  ;
  ; Checkout until a given date (usefull for multiple repos)
  ;
  ;   git checkout `git rev-list -n 1 --before="2009-07-27 13:37" master`

  co       = "checkout"
  coa      = "checkout :/"
  coi      = "checkout-index -f"
  coo      = "checkout --ours"
  cot      = "checkout --theirs"
  cobefore = "!git checkout `git rev-list --max-count=1 --before=\"$@\" master`; #"

  ; __ BRANCH _____________________________                               {{{2

  ; -m  --move  Rename branch
  ; -u          Set upstream of branch (git branch -u origin/feat)
  ;
  ; Delete remote branch (aka push an empty branch to remote like
  ; LOCAL:REMOTE)
  ;
  ;   git push origin :BRANCH_TO_DELETE

  b = "branch"

  ; __ MERGE ______________________________                               {{{2

  ; Edit merge commit message.
  ;
  ;   git merge -e
  ;
  ; Populate the log message with one-line descriptions from at most <n>
  ; actual commits that are being merged.
  ;
  ;   git merge -e --log
  ;
  ; Show the diff of merge commit
  ;
  ;   See "show"
  ;
  ; Check if merge occurs conflicts ("dry run")
  ;
  ;   git merge --no-ff --no-commit
  ;   git merge --abort # If something went wrong
  ;   git commit        # If everything is ok
  ;
  ; Partial merge
  ;
  ;   git merge --no-ff --no-commit BRANCH
  ;   git checkout --ours FILES_TO_DO_NOT_MERGE
  ;   git add FILES
  ;   git commit
  ;
  ; Revert merge
  ;
  ;   git revert -m 1 MERGE_COMMIT
  ;
  ; Resolve a binary merge
  ;
  ;   git checkout --ours   -- <path/to/conflicted_file>
  ;   git checkout --theirs -- <path/to/conflicted_file>
  ;   git log --merge <path/to/conflicted_file>
  ;
  ;   where "ours" is the file in the current branch and "theirs" is the file
  ;   from the branch we want to merge.
  ;
  ; Rebase + squash merge
  ;
  ;   git checkout feature
  ;   git rebase master       # Needed because it's fast-forwarding merge
  ;   git checkout master
  ;   git merge --ff-only --squash feature
  ;   git commit
  ;   git branch -d feature   # We don't need anymore

  me  = "merge"
  mef = "merge --ff-only"
  mea = "merge --abort"

  ; __ BISECT _____________________________                               {{{2

  ; git bisect start HEAD   Start bisecting and mark HEAD as bad
  ; git bisect good/bad     Mark the actual checkout
  ; git bisect good SHA     Mark SHA as good - Git will checkout in the middle of good and bad
  ; git bisect reset        End of bisecting

  bss = "bisect start"
  bsr = "bisect reset" # stop
  bsg = "bisect good"
  bsb = "bisect bad"

  ; __ ADD ________________________________                               {{{2
  ;
  ; Press `?` in `add --patch` to know more about the options.

  adu = "add --update"
  ada = "add --all"
  adp = "add --patch"

  ; __ COMMIT _____________________________                               {{{2

  c   = "commit"
  ca  = "commit --amend"
  cam = "commit --amend --reuse-message=HEAD"
  cm  = "commit -m"
  cmu = "commit -m Update"

  ; fixup   merge without changing the commit message
  ; squash  the commit message is editable

  cfu = "commit --fixup"
  csq = "commit --squash"

  ; __ STASH ______________________________                               {{{2

  ; You can write a note about the stash like this:
  ; $ git stash save "Buggy - find a better way"
  ;
  ; To apply more stashes, apply the first one, then `git add --all`, apply
  ; the next one, etc.

  ; Stash, but keep staged files.
  st  = "stash-needs-message"
  stl = "stash list"
  sts = "stash show"
  sta = "stash apply"
  std = "stash drop"
  stp = "stash pop"

  ; Usage: git str 'stash@{123}'
  str = "!git stash show $@ --patch | git apply --reverse; #"

  ; __ REBASE _____________________________                               {{{2
  ; WARNING: `rebase master` means that the current branch is moved to the end
  ; of `master` and `rebase master dev` does the same with `dev` instead of
  ; the current one!

  ; -i  --interactive      Allow editing of history
  ; -p  --preserve-merges  Rebase merge commits too
  ;     --root             Include the initial commit too
  ;
  ; To rebase a merge commit:
  ;
  ;   git rebase --preserve-merges MERGE_SHA~
  ;
  ; Move a branch to an older commit:
  ;
  ;   git rebase --onto NEW_BASE OLD_BASE BRANCH
  ;
  ; For rebase + squah a feature branch, see merge.

  rb  = "rebase"
  rbi = "rebase --interactive"
  rbc = "rebase --continue"
  rba = "rebase --abort"

  ; __ CHERRY-PICK ________________________                               {{{2

  cr = "cherry-pick -n"

  ; __ SUBMODULE __________________________                               {{{2

  ; Remove submodule:
  ;
  ;   git rm SUBMODULE_DIR
  ;
  ; Change remote:
  ;
  ;   Rewrite urls in .gitmodules, then `git submodule sync`.

  ; You have to run this first after pulling a repo with a commit which adds a
  ; new submodule to it.
  subi = "!git submodule sync; git submodule update --init --recursive"

  ; __ FRAMEWORK-RELATED COMMANDS _________                               {{{2

  ; RUBY
  rails = "!bin/rails"

  ; PHP
  codecept = "!vendor/bin/codecept"

  ; __ OTHER COMMANDS _____________________                               {{{2

  ignore = "!git rm --cached -r :/ ; git add --all ; #"

[core]                                                                  ; {{{1

  ; Create symlinks on Windows too.
  ; https://github.com/git-for-windows/git/wiki/Symbolic-Links
  symlinks = "true"

  ; diff-so-fancy
  ;   Seperate files in diff view
  ; grep
  ;   Highlight specified commits
  ; less
  ;   -S: Do not break long lines (useful for log --graph with branches)
  ;   -i: Smart case in search
  pager = "diff-so-fancy | GREP_COLOR='1;37' grep --color=always -E '(Merge (commit|branch|pull request)|(fixup|squash)!|\\<WIP\\>).*|$' | less --tabs=4 -SiRFX"

  ; Do not modify EOL.
  autocrlf = "false"

  ; Do not show this warning:
  ;   warning: LF will be replaced by CRLF in ...
  ;   The file will have its original line endings in your working directory.
  ; Even if `autocrlf` is set to `false`, this warning is shown (on Git Bash,
  ; not PowerShell ?).
  safecrlf = "false"

  ; Handles very slow the Windows network drives without these settings, but
  ; it require at least 1.9.4.
  ; http://stackoverflow.com/a/24045966
  preloadindex = "true"
  fscache      = "true"

  ; Common template directory ("symlink" instead of copy as `templateDir`
  ; doing):
  ; By default Git will look for your hooks in the $GIT_DIR/hooks directory.
  ; Set this to different path, e.g. /etc/git/hooks, and Git will try to find
  ; your hooks in that directory, e.g. /etc/git/hooks/pre-receive instead of
  ; in $GIT_DIR/hooks/pre-receive.
  ; http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  hooksPath = "~/.gitconfig_files/hooks"

  ; Global .gitignore file.
  excludesfile = "~/.gitconfig_files/core_excludesfile"

  ; Global .gitattributes file
  ; `git log -L:funcname:file` is not working without proper attribute
  ; settings
  attributesFile = "~/.gitconfig_files/core_attributesfile"

[color]                                                                 ; {{{1

  ui = "true"

[color "grep"]

  linenumber = "red"
  separator  = "cyan"
  function   = "cyan"
  match      = "green"
  filename   = "white bold"

[interactive]                                                           ; {{{1

  diffFilter = "diff-so-fancy"

[commit]                                                                ; {{{1

  ; Include the diff in to the commit message (scissors mode).
  verbose = "true"

  ; Additional text which appears on the top of commit message as a comment.
  template = "~/.gitconfig_files/commit_template"

[log]                                                                   ; {{{1

  ; Abbreviate SHA to 7 chars.
  abbrevCommit = "true"

  ; 2014-03-25 12:34:56 +0100
  date = "iso"

  ; Track the full history of a file (follows file renames when viewing a
  ; single file's log).
  follow = "true"

  ; Show ref names too (origin/master, tags, etc.).
  decorate = "true"

[pretty]                                                                ; {{{1

  shortlog = "%C(auto)%h%C(auto)%d %C(bold blue)%ad %an%n  %s%C(reset)"
  mail     = "!TITLE! * %s%n%+b"

[grep]

  ; Let Git grep usable outside of repository too.
  fallbackToNoIndex = "true"

[diff]                                                                  ; {{{1

  ; Find renamed and copied files.
  renames   = "copies"
  tool      = "$EDITORdiff"

  ; Check the diffrenece:
  ;   for i in myers minimal patience histogram; do
  ;     git log --diff-algorithm=$i -p >$i
  ;   done
  algorithm = "minimal"

  ; Well structured hunks:
  ; Needs 2.9
  compactionHeuristic = "true"
  ; Needs 2.11
  indentHeuristic = "true"

[rebase]                                                                ; {{{1

  autoSquash = "true"

[merge]                                                                 ; {{{1

  ; Allways create (empty) merge commits.
  ff   = "false"
  ; IntelliJ IDEA's "Apply All Non-Conflicting Changes" does the trick in most
  ; cases.
  tool = "$EDITORdiff"

  ; 3-way merge
  conflictStyle = "diff3"

[credential]                                                            ; {{{1

  ; Store username/password.
  ; Needs to "Enable Git Credential Manager" during Msys-Git install; to list
  ; stored credentials, use `cmdkey /list`.
  ; If there are multiple instances of the credential.helper configuration
  ; variable, each helper will be tried in turn, and may provide a username,
  ; password, or nothing. Once Git has acquired both a username and a
  ; password, no more helpers will be tried.

  ; Linux (store for 8 hours)
  helper = "cache --timeout=28800"
  ; Windows
  helper = "manager"

[fetch]                                                                 ; {{{1

  ; Allways update all submudolues.
  recurseSubmodules = "true"

  ; Make sure that any branches that were deleted on the remote are also
  ; deleted locally (but won't delete any locally checked-out branches, those
  ; are different from remote-tracking branches).
  prune = "true"

[push]                                                                  ; {{{1

  ; `git push -u` is enough instead of `git push -u origin my_branch`.
  default = "current"

  ; Push annotated tags.
  followTags = "true"

[gc]                                                                    ; {{{1

  ; Minimalize the number of objects in the .git dir (speeds up the things a
  ; bit).
  auto = 256

  ; Detached GC causing problems in GUIs (as SmartGit warned about)
  autoDetach = false

[gui]                                                                   ; {{{1

  encoding = "utf-8"
